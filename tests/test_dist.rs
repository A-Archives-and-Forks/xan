use std::process;

use workdir::Workdir;

fn setup(name: &str) -> (Workdir, process::Command) {
    let rows = vec![
        svec!["h1", "h2"],
        svec!["1", "c"],
        svec!["3", "d"],
        svec!["2", "z"],
        svec!["1", "y"],
        svec!["", "y"],
    ];

    let wrk = Workdir::new(name);
    wrk.create("in.csv", rows);

    let mut cmd = wrk.command("dist");
    cmd.arg("h1").arg("in.csv");

    (wrk, cmd)
}

#[test]
fn dist_basic() {
    let (wrk, mut cmd) = setup("dist_no_headers");
    cmd.args(&["--screen-size", "80"]);

    let mut got: Vec<Vec<String>> = wrk.read_stdout(&mut cmd);
    got = got.into_iter().collect();
    let expected = vec![
        ["                                                               nb_lines | %     "],
        ["   0-1\u{200e} .......................................................        0 | 0.00"],
        ["   1-2\u{200e} ██████████████████████.................................        2 | 40.00"],
        ["   2-3\u{200e} ███████████............................................        1 | 20.00"],
        ["   3-4\u{200e} ███████████............................................        1 | 20.00"],
        ["   4-5\u{200e} .......................................................        0 | 0.00"],
        ["   5-6\u{200e} .......................................................        0 | 0.00"],
        ["   6-7\u{200e} .......................................................        0 | 0.00"],
        ["   7-8\u{200e} .......................................................        0 | 0.00"],
        ["   8-9\u{200e} .......................................................        0 | 0.00"],
        ["  9-10\u{200e} .......................................................        0 | 0.00"],
        ["(NULL)\u{200e} ███████████............................................        1 | 20.00"],
        ["       Distribution for 5/5 lines."]
    ];
    assert_eq!(got, expected);
}
